Terminales no usados en la gramática

    TMENOS


La regla es inútil debido a los conflictos

    9 sents: sent


Estado 23 conflictos: 1 desplazamiento/reducción
Estado 37 conflictos: 1 desplazamiento/reducción


Gramática

    0 $accept: prog $end

    1 prog: main_func

    2 main_func: type MAIN '(' ')' '{' decls sents ret_stmt '}'
    3          | VOID MAIN '(' ')' '{' decls sents ret_stmt '}'

    4 decl: type ID ';'

    5 decls: decl
    6      | decl decls

    7 sent: ID '=' expr ';'
    8     | RET expr ';'

    9 sents: sent
   10      | sent sents

   11 ret_stmt: RET expr ';'
   12         | RET ';'

   13 type: INT
   14     | BOOL

   15 expr: VALOR
   16     | expr '+' expr
   17     | expr '*' expr
   18     | expr '-' expr
   19     | '(' expr ')'
   20     | expr AND expr
   21     | expr OR expr
   22     | ID
   23     | boolean

   24 VALOR: INT

   25 boolean: ε
   26        | TRUE
   27        | FALSE


Terminales con las reglas donde aparecen

    $end (0) 0
    '(' (40) 2 3 19
    ')' (41) 2 3 19
    '*' (42) 17
    '+' (43) 16
    '-' (45) 18
    ';' (59) 4 7 8 11 12
    '=' (61) 7
    '{' (123) 2 3
    '}' (125) 2 3
    error (256)
    INT (258) 13 24
    TRUE (259) 26
    FALSE (260) 27
    ID (261) 4 7 22
    TMENOS (262)
    BOOL (263) 14
    MAIN (264) 2 3
    VOID (265) 3
    RET (266) 8 11 12
    AND (267) 20
    OR (268) 21


No terminales con las reglas donde aparecen

    $accept (23)
        on left: 0
    prog (24)
        on left: 1
        on right: 0
    main_func (25)
        on left: 2 3
        on right: 1
    decl (26)
        on left: 4
        on right: 5 6
    decls (27)
        on left: 5 6
        on right: 2 3 6
    sent (28)
        on left: 7 8
        on right: 9 10
    sents (29)
        on left: 9 10
        on right: 2 3 10
    ret_stmt (30)
        on left: 11 12
        on right: 2 3
    type (31)
        on left: 13 14
        on right: 2 4
    expr (32)
        on left: 15 16 17 18 19 20 21 22 23
        on right: 7 8 11 16 17 18 19 20 21
    VALOR (33)
        on left: 24
        on right: 15
    boolean (34)
        on left: 25 26 27
        on right: 23


Estado 0

    0 $accept: • prog $end

    INT   desplazar e ir al estado 1
    BOOL  desplazar e ir al estado 2
    VOID  desplazar e ir al estado 3

    prog       ir al estado 4
    main_func  ir al estado 5
    type       ir al estado 6


Estado 1

   13 type: INT •

    $default  reduce usando la regla 13 (type)


Estado 2

   14 type: BOOL •

    $default  reduce usando la regla 14 (type)


Estado 3

    3 main_func: VOID • MAIN '(' ')' '{' decls sents ret_stmt '}'

    MAIN  desplazar e ir al estado 7


Estado 4

    0 $accept: prog • $end

    $end  desplazar e ir al estado 8


Estado 5

    1 prog: main_func •

    $default  reduce usando la regla 1 (prog)


Estado 6

    2 main_func: type • MAIN '(' ')' '{' decls sents ret_stmt '}'

    MAIN  desplazar e ir al estado 9


Estado 7

    3 main_func: VOID MAIN • '(' ')' '{' decls sents ret_stmt '}'

    '('  desplazar e ir al estado 10


Estado 8

    0 $accept: prog $end •

    $default  aceptar


Estado 9

    2 main_func: type MAIN • '(' ')' '{' decls sents ret_stmt '}'

    '('  desplazar e ir al estado 11


Estado 10

    3 main_func: VOID MAIN '(' • ')' '{' decls sents ret_stmt '}'

    ')'  desplazar e ir al estado 12


Estado 11

    2 main_func: type MAIN '(' • ')' '{' decls sents ret_stmt '}'

    ')'  desplazar e ir al estado 13


Estado 12

    3 main_func: VOID MAIN '(' ')' • '{' decls sents ret_stmt '}'

    '{'  desplazar e ir al estado 14


Estado 13

    2 main_func: type MAIN '(' ')' • '{' decls sents ret_stmt '}'

    '{'  desplazar e ir al estado 15


Estado 14

    3 main_func: VOID MAIN '(' ')' '{' • decls sents ret_stmt '}'

    INT   desplazar e ir al estado 1
    BOOL  desplazar e ir al estado 2

    decl   ir al estado 16
    decls  ir al estado 17
    type   ir al estado 18


Estado 15

    2 main_func: type MAIN '(' ')' '{' • decls sents ret_stmt '}'

    INT   desplazar e ir al estado 1
    BOOL  desplazar e ir al estado 2

    decl   ir al estado 16
    decls  ir al estado 19
    type   ir al estado 18


Estado 16

    5 decls: decl •
    6      | decl • decls

    INT   desplazar e ir al estado 1
    BOOL  desplazar e ir al estado 2

    $default  reduce usando la regla 5 (decls)

    decl   ir al estado 16
    decls  ir al estado 20
    type   ir al estado 18


Estado 17

    3 main_func: VOID MAIN '(' ')' '{' decls • sents ret_stmt '}'

    ID   desplazar e ir al estado 21
    RET  desplazar e ir al estado 22

    sent   ir al estado 23
    sents  ir al estado 24


Estado 18

    4 decl: type • ID ';'

    ID  desplazar e ir al estado 25


Estado 19

    2 main_func: type MAIN '(' ')' '{' decls • sents ret_stmt '}'

    ID   desplazar e ir al estado 21
    RET  desplazar e ir al estado 22

    sent   ir al estado 23
    sents  ir al estado 26


Estado 20

    6 decls: decl decls •

    $default  reduce usando la regla 6 (decls)


Estado 21

    7 sent: ID • '=' expr ';'

    '='  desplazar e ir al estado 27


Estado 22

    8 sent: RET • expr ';'

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 33
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 23

    9 sents: sent •
   10      | sent • sents

    ID   desplazar e ir al estado 21
    RET  desplazar e ir al estado 22

    RET  [reduce usando la regla 9 (sents)]

    sent   ir al estado 23
    sents  ir al estado 36


Estado 24

    3 main_func: VOID MAIN '(' ')' '{' decls sents • ret_stmt '}'

    RET  desplazar e ir al estado 37

    ret_stmt  ir al estado 38


Estado 25

    4 decl: type ID • ';'

    ';'  desplazar e ir al estado 39


Estado 26

    2 main_func: type MAIN '(' ')' '{' decls sents • ret_stmt '}'

    RET  desplazar e ir al estado 37

    ret_stmt  ir al estado 40


Estado 27

    7 sent: ID '=' • expr ';'

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 41
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 28

   24 VALOR: INT •

    $default  reduce usando la regla 24 (VALOR)


Estado 29

   26 boolean: TRUE •

    $default  reduce usando la regla 26 (boolean)


Estado 30

   27 boolean: FALSE •

    $default  reduce usando la regla 27 (boolean)


Estado 31

   22 expr: ID •

    $default  reduce usando la regla 22 (expr)


Estado 32

   19 expr: '(' • expr ')'

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 42
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 33

    8 sent: RET expr • ';'
   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44
    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47
    ';'  desplazar e ir al estado 48


Estado 34

   15 expr: VALOR •

    $default  reduce usando la regla 15 (expr)


Estado 35

   23 expr: boolean •

    $default  reduce usando la regla 23 (expr)


Estado 36

   10 sents: sent sents •

    $default  reduce usando la regla 10 (sents)


Estado 37

   11 ret_stmt: RET • expr ';'
   12         | RET • ';'

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32
    ';'    desplazar e ir al estado 49

    ';'       [reduce usando la regla 25 (boolean)]
    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 50
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 38

    3 main_func: VOID MAIN '(' ')' '{' decls sents ret_stmt • '}'

    '}'  desplazar e ir al estado 51


Estado 39

    4 decl: type ID ';' •

    $default  reduce usando la regla 4 (decl)


Estado 40

    2 main_func: type MAIN '(' ')' '{' decls sents ret_stmt • '}'

    '}'  desplazar e ir al estado 52


Estado 41

    7 sent: ID '=' expr • ';'
   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44
    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47
    ';'  desplazar e ir al estado 53


Estado 42

   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   19     | '(' expr • ')'
   20     | expr • AND expr
   21     | expr • OR expr

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44
    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47
    ')'  desplazar e ir al estado 54


Estado 43

   16 expr: expr '+' • expr

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 55
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 44

   18 expr: expr '-' • expr

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 56
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 45

   17 expr: expr '*' • expr

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 57
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 46

   20 expr: expr AND • expr

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 58
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 47

   21 expr: expr OR • expr

    INT    desplazar e ir al estado 28
    TRUE   desplazar e ir al estado 29
    FALSE  desplazar e ir al estado 30
    ID     desplazar e ir al estado 31
    '('    desplazar e ir al estado 32

    $default  reduce usando la regla 25 (boolean)

    expr     ir al estado 59
    VALOR    ir al estado 34
    boolean  ir al estado 35


Estado 48

    8 sent: RET expr ';' •

    $default  reduce usando la regla 8 (sent)


Estado 49

   12 ret_stmt: RET ';' •

    $default  reduce usando la regla 12 (ret_stmt)


Estado 50

   11 ret_stmt: RET expr • ';'
   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr

    '+'  desplazar e ir al estado 43
    '-'  desplazar e ir al estado 44
    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47
    ';'  desplazar e ir al estado 60


Estado 51

    3 main_func: VOID MAIN '(' ')' '{' decls sents ret_stmt '}' •

    $default  reduce usando la regla 3 (main_func)


Estado 52

    2 main_func: type MAIN '(' ')' '{' decls sents ret_stmt '}' •

    $default  reduce usando la regla 2 (main_func)


Estado 53

    7 sent: ID '=' expr ';' •

    $default  reduce usando la regla 7 (sent)


Estado 54

   19 expr: '(' expr ')' •

    $default  reduce usando la regla 19 (expr)


Estado 55

   16 expr: expr • '+' expr
   16     | expr '+' expr •
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr

    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47

    $default  reduce usando la regla 16 (expr)


Estado 56

   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   18     | expr '-' expr •
   20     | expr • AND expr
   21     | expr • OR expr

    '*'  desplazar e ir al estado 45
    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47

    $default  reduce usando la regla 18 (expr)


Estado 57

   16 expr: expr • '+' expr
   17     | expr • '*' expr
   17     | expr '*' expr •
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr

    AND  desplazar e ir al estado 46
    OR   desplazar e ir al estado 47

    $default  reduce usando la regla 17 (expr)


Estado 58

   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   20     | expr AND expr •
   21     | expr • OR expr

    $default  reduce usando la regla 20 (expr)


Estado 59

   16 expr: expr • '+' expr
   17     | expr • '*' expr
   18     | expr • '-' expr
   20     | expr • AND expr
   21     | expr • OR expr
   21     | expr OR expr •

    $default  reduce usando la regla 21 (expr)


Estado 60

   11 ret_stmt: RET expr ';' •

    $default  reduce usando la regla 11 (ret_stmt)
